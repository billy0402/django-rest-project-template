[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "django-rest-project-template"
version = "0.1.0"
description = "Django REST template."
authors = [
    "Arthur Chang <arthurc0102@gmail.com>",
    "Billy Huang <10646003@ntub.edu.tw>",
]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
django = "5.1.2"
django-stubs-ext = "5.1.0"
django-environ = "0.11.2"
django-extensions = "3.2.3"
django-split-settings = "1.3.2"
django-filter = "24.3"
django-cors-headers = "4.5.0"
djangorestframework = "3.15.2"
djangorestframework-simplejwt = "5.3.1"
drf-spectacular = "0.27.2"
psycopg = { extras = ["binary"], version = "3.1.19" }

[tool.poetry.group.dev.dependencies]
ipython = "8.28.0"
werkzeug = "3.0.4"
nplusone = "1.0.0"
pre-commit = "4.0.1"

[tool.poetry.group.lint.dependencies]
ruff = "0.7.0"
# Use same version with VSCode Pylance: https://github.com/microsoft/pylance-release/blob/main/releases/latest-release.json
pyright = "1.1.382"
django-types = "0.19.1"
djangorestframework-types = "0.9.0"

[tool.poetry.group.test.dependencies]
pytest = "8.3.3"
pytest-cov = "5.0.0"
greenlet = "3.1.1"
pytest-xdist = "3.6.1"
pytest-django = "4.9.0"
nplusone = "1.0.0"
time-machine = "2.16.0"
model-bakery = "1.20.0"

[tool.poetry.group.deploy]
optional = true

[tool.poetry.group.deploy.dependencies]
gunicorn = "23.0.0"


[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # pydocstyle: Do not require any docstring.
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D212",
  "D203",
  # pydocstyle: Allow blank line after docstring.
  "D202",
  # flake8-pytest-style: Don't required leading underscore when fixture does not return anything.
  "PT004",
  # flake8-annotations: Don't required type annotation for self and cls.
  "ANN101",
  "ANN102",
  # flake8-annotations: Allow function arguments are annotated with Any for args and kwargs.
  "ANN401",
  # flake8-unused-arguments: Keep function arguments in overriding django function definitions.
  "ARG001",
  "ARG002",
  # Ignore rules for linter.
  "COM812",
  "ISC001",
]
exclude = ["server/**/migrations/*.py"]

[tool.ruff.lint.per-file-ignores]
"**/*test*" = ["S101"] # flake8-bandit: Allow using assert

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["typing"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.format]
# skip-magic-trailing-comma = true
exclude = ["server/**/migrations/*.py"]


[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportUnnecessaryTypeIgnoreComment = true


[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "server.settings"
addopts = "-vv --reuse-db --nomigrations"
python_files = ["tests.py", "test_*.py", "*_test.py"]
filterwarnings = ["error", "ignore::DeprecationWarning"]
markers = ["only"]


[tool.coverage.run]
branch = true
concurrency = ["greenlet"]
omit = ["server/**/migrations/*.py"]

[tool.coverage.report]
exclude_also = ["if typing.TYPE_CHECKING:", "@typing.overload"]
