import typing as t

import pytest
from django.contrib.staticfiles import testing
from selenium import webdriver
from selenium.webdriver.common import action_chains, by, keys
from selenium.webdriver.support import wait


@pytest.fixture(autouse=True, scope="class")
def setup_driver(request: t.Any) -> t.Generator:
    try:
        chrome_driver = webdriver.Firefox()
        request.cls.driver = chrome_driver
        yield chrome_driver
    finally:
        if hasattr(request.cls, "driver"):
            request.cls.driver.quit()


@pytest.mark.django_db
class TestChatRooms(testing.StaticLiveServerTestCase):
    driver: webdriver.Firefox

    def _enter_chat_room(self, room_name: str) -> None:
        self.driver.get(f"{self.live_server_url}/chat/")
        action_chains.ActionChains(self.driver).send_keys(
            room_name, keys.Keys.ENTER
        ).perform()
        wait.WebDriverWait(self.driver, 2).until(
            lambda _: room_name in self.driver.current_url
        )

    def _open_new_window(self) -> None:
        self.driver.execute_script('window.open("about:blank", "_blank");')
        self._switch_to_window(-1)

    def _close_all_new_windows(self) -> None:
        while len(self.driver.window_handles) > 1:
            self._switch_to_window(-1)
            self.driver.execute_script("window.close();")

        if len(self.driver.window_handles) == 1:
            self._switch_to_window(0)

    def _switch_to_window(self, window_index: int) -> None:
        self.driver.switch_to.window(self.driver.window_handles[window_index])

    def _post_message(self, message: str) -> None:
        assert self.driver is None
        action_chains.ActionChains(self.driver).send_keys(
            message, keys.Keys.ENTER
        ).perform()

    def _get_chat_log(self) -> str:
        chat_log = self.driver.find_element(by.By.CSS_SELECTOR, "#chat-log")
        return t.cast(str, chat_log.get_property("value"))

    async def test_message_seen_in_same_room(self) -> None:
        try:
            self._enter_chat_room("room_1")

            self._open_new_window()
            self._enter_chat_room("room_1")

            self._switch_to_window(0)
            self._post_message("hello")

            wait.WebDriverWait(self.driver, 2).until(
                lambda _: "hello" in self._get_chat_log(),
                "Message was not received by window 1",
            )

            self._switch_to_window(1)
            wait.WebDriverWait(self.driver, 2).until(
                lambda _: "hello" in self._get_chat_log(),
                "Message was not received by window 2",
            )
        finally:
            self._close_all_new_windows()

    async def test_message_not_seen_in_different_rooms(self) -> None:
        try:
            self._enter_chat_room("room_1")

            self._open_new_window()
            self._enter_chat_room("room_2")

            self._switch_to_window(0)
            self._post_message("hello")

            wait.WebDriverWait(self.driver, 5).until(
                lambda _: "hello" in self._get_chat_log(),
                "Message was not received by window 1",
            )

            self._switch_to_window(1)
            self._post_message("world")

            wait.WebDriverWait(self.driver, 5).until(
                lambda _: "world" in self._get_chat_log(),
                "Message was not received by window 2",
            )

            assert (
                "hello" not in self._get_chat_log()
            ), "Message was improperly received across different rooms"
        finally:
            self._close_all_new_windows()
